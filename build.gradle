plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
  maven {
    name = "CottonMC"
    url = "https://server.bbkr.space/artifactory/libs-release"
  }
	maven { url 'https://jitpack.io' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

  // bundle the external mods
  modImplementation include("io.github.cottonmc:LibGui:${project.libgui_version}")
	modImplementation include("com.github.hashicraft:fabric-stateful-mod:${stateful_version}")

  // add the external dependencies to the fat jar
  shadow("org.postgresql:postgresql:42.6.0");
  shadow("io.javalin:javalin:5.6.3");
  shadow("io.javalin.community.ssl:ssl-plugin:5.6.3");

  // some dependencies are not pulled in with shadow
  implementation include('org.conscrypt:conscrypt-openjdk-uber:2.5.2');
  implementation include('org.eclipse.jetty:jetty-alpn-java-server:11.0.17');
  implementation include('org.eclipse.jetty:jetty-alpn-conscrypt-server:11.0.17');
  implementation include('org.eclipse.jetty.http2:http2-server:11.0.17');
  
  testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.2")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.2")
}

shadowJar {
  configurations = [project.configurations.shadow]
  exclude("META-INF")
}

remapJar {
    // wait until the shadowJar is done
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    // Set the input jar for the task. Here use the shadow Jar that include the .class of the transitive dependency
    inputFile = file(shadowJar.archivePath)
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

task copyToLib(type: Copy) {
  into "$buildDir/output/lib"
  from configurations.runtimeClasspath
}

//test {
//	useJUnitPlatform()
//	testLogging {
//		events "passed", "skipped", "failed"
//	}
//}
